{"version":3,"sources":["axios.js","Components/Row.js","request.js","Components/Banner.js","Components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","props","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","fetchUrl","request","data","results","fetchData","className","title","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","err","console","log","handleClick","isLargeRow","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","requests","Math","floor","random","length","style","backgroundImage","original_name","overview","substr","Nav","show","handleshow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9cf85a1c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3',\r\n});\r\n\r\nexport default instance;\r\n","//! componenet for each row on the app\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from '../axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst imgUrl = 'http://image.tmdb.org/t/p/original/';\r\n\r\nconst Row = (props) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(props.fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [props.fetchUrl]);\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || '')\r\n                .then((url) => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h1>{props.title}</h1>\r\n            <div className=\"row-posters\">\r\n                {movies.map((movie) => (\r\n                    <img\r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row-poster ${\r\n                            props.isLargeRow ? 'row-poster-large' : null\r\n                        }`}\r\n                        src={`${imgUrl}${\r\n                            props.isLargeRow\r\n                                ? movie.poster_path\r\n                                : movie.backdrop_path\r\n                        }`}\r\n                        alt={movie.name}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Row;\r\n","const API_KEY = '46f7860492ea873c15ed8cae45be5618';\r\n\r\nconst request = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default request;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from '../axios';\r\nimport requests from '../request';\r\nimport './Banner.css';\r\n\r\nconst Banner = () => {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    function truncat(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n    }\r\n\r\n    return (\r\n        <header\r\n            className=\"banner\"\r\n            style={{\r\n                backgroundImage: `url(\"http://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            }}\r\n        >\r\n            <div className=\"banner-contents\">\r\n                <h1 className=\"banner-title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner-buttons\">\r\n                    <button className=\"banner-button play\">Play</button>\r\n                    <button className=\"banner-button list\">My List</button>\r\n                </div>\r\n                <h3 className=\"banner-descpriptions\">\r\n                    {truncat(movie?.overview, 150)}\r\n                </h3>\r\n            </div>\r\n            <div className=\"backdrop\"></div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Nav.css';\r\n\r\nconst Nav = () => {\r\n    const [show, handleshow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', () => {\r\n            if (window.scrollY > 100) {\r\n                handleshow(true);\r\n            } else {\r\n                handleshow(false);\r\n            }\r\n            return;\r\n        });\r\n        return () => window.removeEventListener();\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && 'nav-black'}`}>\r\n            <img\r\n                className=\"nav-logo\"\r\n                src=\"https://www.freepnglogos.com/uploads/netflix-logo-0.png\"\r\n                alt=\"logo\"\r\n            />\r\n            <img\r\n                className=\"nav-avatar\"\r\n                src=\"https://www.freepnglogos.com/uploads/doraemon-png/doraemon-character-free-download-8.png\"\r\n                alt=\"avatar\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Components/Row';\nimport requests from './request';\nimport Banner from './Components/Banner';\nimport Nav from './Components/Nav';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <Nav />\n            <Banner />\n            <Row\n                title=\"Originals\"\n                fetchUrl={requests.fetchNetflixOriginals}\n                isLargeRow\n            />\n            <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n            <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n            <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n            <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n            <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n            <Row\n                title=\"Romantic Movies\"\n                fetchUrl={requests.fetchRomanceMovies}\n            />\n            <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}